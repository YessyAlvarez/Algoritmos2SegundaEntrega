package uy.ort.ob20182;

import residuos.GrafoNoDirigido;
import uy.ort.ob20182.Retorno.Resultado;

public class Sistema implements ISistema {

	private GrafoNoDirigido ABCpalabras;
	private int maxPalabras;

	public Retorno inicializarSistema (int maxPalabras) {
		Retorno retorno = new Retorno();
        if(maxPalabras>0){
        	this.maxPalabras = maxPalabras;
        	ABCpalabras = new GrafoNoDirigido();
            retorno.resultado = Resultado.OK;
        }else if(maxPalabras<1){
       	 	destruirSistema();
            retorno.resultado = Resultado.ERROR_1;
        }else{
       	 retorno.resultado = Resultado.NO_IMPLEMENTADA;
        }
        return retorno;
	}
	
	public Retorno destruirSistema() {
		Retorno retorno = new Retorno();
		ABCpalabras = null;
		retorno.resultado = Resultado.OK;
		return retorno;
	}

	public Retorno analizarTexto(String texto) {
		Retorno retorno = new Retorno();
		//Verifico que el sistema exista
		if(this.ABCpalabras==null) {
			retorno.resultado = Resultado.NO_IMPLEMENTADA;
		} else if(texto.length()==0) { 	//Verifico que el texto no sea vacio
			retorno.resultado = Resultado.ERROR_1;
		} else {
			//Convierto el texto en minuscula
			texto = texto.toLowerCase();
			//Parseo el texto
			String [] palabras = texto.split("[:.,()?¿!¡ ]");
			int cantPalabrasDistintas = countPalabrasDistintas(texto, palabras);
			if(cantPalabrasDistintas>this.maxPalabras) {
				retorno.resultado = Resultado.ERROR_2;
			}else {
				int palabrasProcesar = palabras.length;
				for(int i=0; i<palabrasProcesar; i++) {
					if(i==0) {
						ABCpalabras.crearVertice(palabras[i]);
					}else {
						ABCpalabras.insertarVertice(palabras[i], palabras[i-1]);
					}
				}
				retorno.resultado = Resultado.OK;
			}
		}
		return retorno;
	}
	

	private int countPalabrasDistintas(String texto, String [] palabras) {
		int sumaCantidadPalabras = 0;
		int palabrasProcesar = palabras.length;
		String [] palabrasAux = new String[palabrasProcesar];
		for(int i=0; i<palabrasProcesar; i++) {
			if(i==0) {
				palabrasAux[0] = palabras[0];
			}else{
				int contAux = 0;
				for(int j=0; j<palabrasProcesar; j++) {
					if(!palabras[j].equalsIgnoreCase(palabrasAux[i])) {
						contAux++;
					}
				}
				if(contAux==0) {
					palabrasAux[i] = palabras[i];
				}
			}
		}
		for(int i=0; i<palabrasProcesar; i++) {
			if(palabrasAux[i]!=null) {
				sumaCantidadPalabras++;
			}
		}
		return sumaCantidadPalabras;
	}

	public Retorno aparicionesPalabra(String palabra) {
		// ToDo: Implementar aqui el metodo
		return new Retorno(Resultado.NO_IMPLEMENTADA);
	}

	@Override
	public Retorno predecirPalabra(String palabra) {
		// ToDo: Implementar aqui el metodo
		return new Retorno(Resultado.NO_IMPLEMENTADA);
	}

	@Override
	public Retorno repetirFrase(String palabraIni, String palabraFin) {
		// ToDo: Implementar aqui el metodo
		return new Retorno(Resultado.NO_IMPLEMENTADA);
	}
	
}
